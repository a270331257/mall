/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.service.RedisService;
import com.macro.mall.mapper.OmsOrderItemMapper;
import com.macro.mall.mapper.OmsOrderMapper;
import com.macro.mall.mapper.OmsOrderSettingMapper;
import com.macro.mall.mapper.PmsSkuStockMapper;
import com.macro.mall.mapper.SmsCouponHistoryMapper;
import com.macro.mall.mapper.UmsIntegrationConsumeSettingMapper;
import com.macro.mall.model.OmsOrder;
import com.macro.mall.model.OmsOrderItem;
import com.macro.mall.model.OmsOrderSetting;
import com.macro.mall.model.PmsSkuStock;
import com.macro.mall.model.SmsCoupon;
import com.macro.mall.model.SmsCouponHistory;
import com.macro.mall.model.SmsCouponProductCategoryRelation;
import com.macro.mall.model.SmsCouponProductRelation;
import com.macro.mall.model.UmsIntegrationConsumeSetting;
import com.macro.mall.model.UmsMember;
import com.macro.mall.model.UmsMemberReceiveAddress;
import com.macro.mall.portal.component.CancelOrderSender;
import com.macro.mall.portal.dao.PortalOrderDao;
import com.macro.mall.portal.dao.PortalOrderItemDao;
import com.macro.mall.portal.domain.CartPromotionItem;
import com.macro.mall.portal.domain.ConfirmOrderResult;
import com.macro.mall.portal.domain.OmsOrderDetail;
import com.macro.mall.portal.domain.OrderParam;
import com.macro.mall.portal.domain.SmsCouponHistoryDetail;
import com.macro.mall.portal.service.OmsCartItemService;
import com.macro.mall.portal.service.UmsMemberCouponService;
import com.macro.mall.portal.service.UmsMemberReceiveAddressService;
import com.macro.mall.portal.service.UmsMemberService;
import com.macro.mall.portal.service.impl.OmsPortalOrderServiceImpl;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OmsPortalOrderServiceImpl_SSTest extends OmsPortalOrderServiceImpl_SSTest_scaffolding {
// allCoveredLines:[33, 71, 73, 74, 75, 77, 78, 80, 81, 83, 85, 86, 88, 89, 90, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 124, 126, 127, 128, 131, 132, 133, 136, 139, 141, 142, 143, 146, 147, 148, 149, 152, 153, 154, 155, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 212, 214, 215, 216, 220, 221, 222, 223, 224, 225, 227, 228, 231, 232, 233, 236, 238, 239, 240, 241, 242, 247, 248, 251, 252, 253, 254, 255, 256, 258, 259, 260, 265, 266, 268, 269, 270, 273, 274, 275, 276, 277, 278, 280, 282, 284, 285, 286, 288, 289, 295, 296, 297, 298, 299, 301, 302, 304, 305, 306, 307, 308, 310, 311, 314, 316, 317, 318, 321, 326, 327, 329, 330, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 350, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 394, 395, 396, 397, 398, 399, 400, 405, 406, 407, 408, 410, 411, 412, 414, 416, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 435, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 464, 465, 466, 467, 468, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 494, 496, 497, 498, 499, 500, 501, 502, 508, 509, 510, 511, 512, 513, 514, 515, 517, 525, 526, 527, 528, 529, 530, 537, 538, 539, 540, 542, 543, 550, 551, 552, 553, 555, 556, 563, 564, 565, 566, 568, 569, 581, 583, 584, 588, 589, 591, 594, 595, 598, 599, 600, 601, 603, 613, 614, 617, 619, 620, 621, 623, 624, 626, 634, 635, 637, 638, 639, 640, 650, 651, 652, 653, 654, 655, 656, 657, 660, 662, 663, 664, 665, 666, 667, 668, 669, 672, 674, 676, 686, 687, 688, 689, 691, 692, 699, 700, 701, 702, 703, 710, 711, 712, 713, 714, 715, 721, 722, 723, 725, 726, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744]

  @Test(timeout = 4000)
  public void test_calcCouponAmount_00()  throws Throwable  {
      //caseID:926b29ce9b4777539d98046f4159158f
      //CoveredLines: [33, 550, 551, 552, 555, 556]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: arrayList0
      //Assert: assertEquals((byte)0, method_result.byteValue());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      ArrayList<OmsOrderItem> arrayList0 = new ArrayList<OmsOrderItem>();
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(omsOrderItem0);
      
      //Call method: calcCouponAmount
      BigDecimal bigDecimal0 = (BigDecimal)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "calcCouponAmount", (Object) arrayList0, (Class<?>) List.class);
      
      //Test Result Assert
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test_calcCouponAmount_01()  throws Throwable  {
      //caseID:7d6d64ca7eabf4905eea113dbd3ffe75
      //CoveredLines: [33, 550, 551, 552, 553, 555, 556]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: stack0
      //Assert: assertEquals((byte) (-44), method_result.byteValue());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Stack<OmsOrderItem> stack0 = new Stack<OmsOrderItem>();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Integer integer0 = new Integer(354);
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0).when(omsOrderItem0).getCouponAmount();
      doReturn(integer0).when(omsOrderItem0).getProductQuantity();
      
      stack0.add(omsOrderItem0);
      
      //Call method: calcCouponAmount
      BigDecimal bigDecimal1 = (BigDecimal)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "calcCouponAmount", (Object) stack0, (Class<?>) List.class);
      
      //Test Result Assert
      assertEquals((byte) (-44), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test_calcIntegrationAmount_02()  throws Throwable  {
      //caseID:08e4645d290889ec3d522a451d711cb3
      //CoveredLines: [33, 537, 538, 539, 542, 543]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: vector0
      //Assert: assertEquals((byte)0, method_result.byteValue());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Vector<OmsOrderItem> vector0 = new Vector<OmsOrderItem>();
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      vector0.add(omsOrderItem0);
      
      //Call method: calcIntegrationAmount
      BigDecimal bigDecimal0 = (BigDecimal)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "calcIntegrationAmount", (Object) vector0, (Class<?>) List.class);
      
      //Test Result Assert
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test_calcPerCouponAmount_03()  throws Throwable  {
      //caseID:672a1f1eb006c2252f5e84d1aa2e70ee
      //CoveredLines: [33, 634, 635, 637, 638, 639, 640, 699, 700, 701, 702, 703]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: stack0
      //Input_1_com.macro.mall.model.SmsCoupon: {getAmount=BigDecimal.ONE}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Stack<OmsOrderItem> stack0 = new Stack<OmsOrderItem>();
      Integer integer0 = new Integer(123);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0).when(omsOrderItem0).getProductPrice();
      doReturn(integer0).when(omsOrderItem0).getProductQuantity();
      
      stack0.add(omsOrderItem0);
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(smsCoupon0).getAmount();
      
      //Call method: calcPerCouponAmount
      PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "calcPerCouponAmount", (Object) stack0, (Class<?>) List.class, (Object) smsCoupon0, (Class<?>) SmsCoupon.class);
      
      //Test Result Assert
      assertEquals(10, stack0.capacity());
  }

  @Test(timeout = 4000)
  public void test_calcPromotionAmount_04()  throws Throwable  {
      //caseID:822dcd0341bcf484a8a9008161dc8baf
      //CoveredLines: [33, 563, 564, 565, 568, 569]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: linkedList0
      //Assert: assertEquals((byte)0, method_result.byteValue());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      LinkedList<OmsOrderItem> linkedList0 = new LinkedList<OmsOrderItem>();
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(omsOrderItem0);
      
      //Call method: calcPromotionAmount
      BigDecimal bigDecimal0 = (BigDecimal)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "calcPromotionAmount", (Object) linkedList0, (Class<?>) List.class);
      
      //Test Result Assert
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test_cancelOrder_05()  throws Throwable  {
      //caseID:dccf56d2dc782784dd6bdf03f1cc8346
      //CoveredLines: [33, 295, 296, 297, 298, 299]
      //Input_0_Long: 1314L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      Long long0 = new Long(1314L);
      
      //Call method: cancelOrder
      omsPortalOrderServiceImpl0.cancelOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_cancelOrder_06()  throws Throwable  {
      //caseID:6a6c2bcd8fc5b320329b0f46853f1bfb
      //CoveredLines: [33, 295, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 310, 311, 314, 316, 321, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491]
      //Input_0_Long: 0L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Vector<OmsOrderItem> vector0 = new Vector<OmsOrderItem>();
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      vector0.add(omsOrderItem0);
      //mock omsOrderItemMapper0
      OmsOrderItemMapper omsOrderItemMapper0 = mock(OmsOrderItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(omsOrderItemMapper0).selectByExample(any(com.macro.mall.model.OmsOrderItemExample.class));
      Vector<OmsOrder> vector1 = new Vector<OmsOrder>();
      Long long0 = new Long(0L);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getCouponId();
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn((Integer) null).when(omsOrder0).getUseIntegration();
      
      vector1.add(omsOrder0);
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector1).when(omsOrderMapper0).selectByExample(any(com.macro.mall.model.OmsOrderExample.class));
      doReturn(2).when(omsOrderMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.OmsOrder.class));
      Vector<SmsCouponHistory> vector2 = new Vector<SmsCouponHistory>();
      //mock smsCouponHistory0
      SmsCouponHistory smsCouponHistory0 = mock(SmsCouponHistory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      vector2.add(smsCouponHistory0);
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector2).when(smsCouponHistoryMapper0).selectByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      doReturn(100).when(smsCouponHistoryMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsCouponHistory.class));
      //mock portalOrderDao0
      PortalOrderDao portalOrderDao0 = mock(PortalOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(31).when(portalOrderDao0).releaseSkuStockLock(ArgumentMatchers.<com.macro.mall.model.OmsOrderItem>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "portalOrderDao", (Object) portalOrderDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemMapper", (Object) omsOrderItemMapper0);
      
      //Call method: cancelOrder
      omsPortalOrderServiceImpl0.cancelOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_cancelOrder_07()  throws Throwable  {
      //caseID:9b5214ff6d5dd4467b43609197c32f12
      //CoveredLines: [33, 295, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 310, 311, 314, 316, 317, 318, 321, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491]
      //Input_0_Long: 539L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      LinkedList<OmsOrderItem> linkedList0 = new LinkedList<OmsOrderItem>();
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(omsOrderItem0);
      //mock omsOrderItemMapper0
      OmsOrderItemMapper omsOrderItemMapper0 = mock(OmsOrderItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(omsOrderItemMapper0).selectByExample(any(com.macro.mall.model.OmsOrderItemExample.class));
      Vector<OmsOrder> vector0 = new Vector<OmsOrder>();
      Integer integer0 = new Integer(6);
      Long long0 = new Long(539L);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getCouponId();
      doReturn(long0, long0, long0).when(omsOrder0).getMemberId();
      doReturn(integer0, integer0).when(omsOrder0).getUseIntegration();
      
      vector0.add(omsOrder0);
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(omsOrderMapper0).selectByExample(any(com.macro.mall.model.OmsOrderExample.class));
      doReturn(6).when(omsOrderMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.OmsOrder.class));
      LinkedList<SmsCouponHistory> linkedList1 = new LinkedList<SmsCouponHistory>();
      //mock smsCouponHistory0
      SmsCouponHistory smsCouponHistory0 = mock(SmsCouponHistory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList1.add(smsCouponHistory0);
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList1).when(smsCouponHistoryMapper0).selectByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      doReturn(1719).when(smsCouponHistoryMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsCouponHistory.class));
      //mock portalOrderDao0
      PortalOrderDao portalOrderDao0 = mock(PortalOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(portalOrderDao0).releaseSkuStockLock(ArgumentMatchers.<com.macro.mall.model.OmsOrderItem>anyList());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsMember0).getIntegration();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getById(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "portalOrderDao", (Object) portalOrderDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemMapper", (Object) omsOrderItemMapper0);
      
      //Call method: cancelOrder
      omsPortalOrderServiceImpl0.cancelOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_cancelTimeOutOrder_08()  throws Throwable  {
      //caseID:17fbcdf9258d2c917ea478cf1d97a94d
      //CoveredLines: [33, 265, 266, 268, 269, 270]
      //Assert: assertEquals(0, (int)method_result);
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrderSetting0).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      //mock portalOrderDao0
      PortalOrderDao portalOrderDao0 = mock(PortalOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "portalOrderDao", (Object) portalOrderDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      //Call method: cancelTimeOutOrder
      Integer integer0 = omsPortalOrderServiceImpl0.cancelTimeOutOrder();
      
      //Test Result Assert
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test_cancelTimeOutOrder_09()  throws Throwable  {
      //caseID:2f55c47e650c1bdcabdaad2bb510544e
      //CoveredLines: [33, 265, 266, 268, 269, 273, 274, 275, 276, 277, 278, 280, 282, 284, 288, 289, 479]
      //Assert: assertEquals(1, (int)method_result);
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Integer integer0 = new Integer(0);
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getNormalOrderOvertime();
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrderSetting0).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      Stack<OmsOrderDetail> stack0 = new Stack<OmsOrderDetail>();
      //mock omsOrderDetail0
      OmsOrderDetail omsOrderDetail0 = mock(OmsOrderDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stack0.add(omsOrderDetail0);
      //mock portalOrderDao0
      PortalOrderDao portalOrderDao0 = mock(PortalOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(portalOrderDao0).getTimeOutOrders(nullable(java.lang.Integer.class));
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "portalOrderDao", (Object) portalOrderDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      //Call method: cancelTimeOutOrder
      Integer integer1 = omsPortalOrderServiceImpl0.cancelTimeOutOrder();
      
      //Test Result Assert
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test_cancelTimeOutOrder_10()  throws Throwable  {
      //caseID:5b33a35f032879afef84f7991d0f012f
      //CoveredLines: [33, 265, 266, 268, 269, 273, 274, 275, 276, 277, 278, 280, 282, 284, 285, 286, 288, 289, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491]
      //Assert: assertEquals(1, (int)method_result);
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Integer integer0 = new Integer(407);
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getNormalOrderOvertime();
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrderSetting0).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      LinkedList<SmsCouponHistory> linkedList0 = new LinkedList<SmsCouponHistory>();
      //mock smsCouponHistory0
      SmsCouponHistory smsCouponHistory0 = mock(SmsCouponHistory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(smsCouponHistory0);
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(smsCouponHistoryMapper0).selectByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      doReturn(2082).when(smsCouponHistoryMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsCouponHistory.class));
      Vector<OmsOrderDetail> vector0 = new Vector<OmsOrderDetail>();
      Stack<OmsOrderItem> stack0 = new Stack<OmsOrderItem>();
      Long long0 = new Long(0L);
      //mock omsOrderDetail0
      OmsOrderDetail omsOrderDetail0 = mock(OmsOrderDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrderDetail0).getCouponId();
      doReturn(long0).when(omsOrderDetail0).getId();
      doReturn(long0, long0, long0).when(omsOrderDetail0).getMemberId();
      doReturn(integer0, integer0).when(omsOrderDetail0).getUseIntegration();
      doReturn(stack0).when(omsOrderDetail0).getOrderItemList();
      
      vector0.add(omsOrderDetail0);
      //mock portalOrderDao0
      PortalOrderDao portalOrderDao0 = mock(PortalOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(portalOrderDao0).getTimeOutOrders(anyInt());
      doReturn((-16)).when(portalOrderDao0).releaseSkuStockLock(nullable(java.util.List.class));
      doReturn(0).when(portalOrderDao0).updateOrderStatus(ArgumentMatchers.<java.lang.Long>anyList() , anyInt());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsMember0).getIntegration();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getById(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "portalOrderDao", (Object) portalOrderDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      //Call method: cancelTimeOutOrder
      Integer integer1 = omsPortalOrderServiceImpl0.cancelTimeOutOrder();
      
      //Test Result Assert
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test_confirmReceiveOrder_11()  throws Throwable  {
      //caseID:9960ec65080ccad0b678270afa89fb95
      //CoveredLines: [33, 334, 335, 336, 337]
      //Input_0_Long: 1287L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(1287L);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      Long long1 = new Long(0L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: confirmReceiveOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.confirmReceiveOrder(long0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u4E0D\u80FD\u786E\u8BA4\u4ED6\u4EBA\u8BA2\u5355\uFF01", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_confirmReceiveOrder_12()  throws Throwable  {
      //caseID:0c52463defc201089c82ba79ca755d04
      //CoveredLines: [33, 334, 335, 336, 339, 340]
      //Input_0_Long: 0L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(100);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn(integer0).when(omsOrder0).getStatus();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: confirmReceiveOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.confirmReceiveOrder(long0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u8BE5\u8BA2\u5355\u8FD8\u672A\u53D1\u8D27\uFF01", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_confirmReceiveOrder_13()  throws Throwable  {
      //caseID:2890c6d895ec88b544c0cf8913bdfcc7
      //CoveredLines: [33, 334, 335, 336, 339, 342, 343, 344, 345, 346]
      //Input_0_Long: 0L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(2);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn(integer0).when(omsOrder0).getStatus();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      doReturn(2).when(omsOrderMapper0).updateByPrimaryKey(any(com.macro.mall.model.OmsOrder.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: confirmReceiveOrder
      omsPortalOrderServiceImpl0.confirmReceiveOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_deleteOrder_14()  throws Throwable  {
      //caseID:759465b36371ce41036de2175b708201
      //CoveredLines: [33, 405, 406, 407, 408]
      //Input_0_Long: 1L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(0L);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      Long long1 = new Long(1L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: deleteOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.deleteOrder(long1);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u4E0D\u80FD\u5220\u9664\u4ED6\u4EBA\u8BA2\u5355\uFF01", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_deleteOrder_15()  throws Throwable  {
      //caseID:13b772dff1ae1c64241920023e9f7394
      //CoveredLines: [33, 405, 406, 407, 410, 414]
      //Input_0_Long: 1L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(1L);
      Integer integer0 = new Integer(100);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn(integer0, integer0).when(omsOrder0).getStatus();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: deleteOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.deleteOrder(long0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u53EA\u80FD\u5220\u9664\u5DF2\u5B8C\u6210\u6216\u5DF2\u5173\u95ED\u7684\u8BA2\u5355\uFF01", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_deleteOrder_16()  throws Throwable  {
      //caseID:efeecb6c116682f916dc228d584a4845
      //CoveredLines: [33, 405, 406, 407, 410, 411, 412, 416]
      //Input_0_Long: 0L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(4);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn(integer0).when(omsOrder0).getStatus();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: deleteOrder
      omsPortalOrderServiceImpl0.deleteOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_deleteOrder_17()  throws Throwable  {
      //caseID:b97435cb6709cbfba5e73b103c851107
      //CoveredLines: [33, 405, 406, 407, 410, 411, 412, 416]
      //Input_0_Long: 0L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(3);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn(integer0).when(omsOrder0).getStatus();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: deleteOrder
      omsPortalOrderServiceImpl0.deleteOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_detail_18()  throws Throwable  {
      //caseID:2ef3e32b9de9f71a3b51ab89de1c3713
      //CoveredLines: [33, 393, 394, 395, 396, 397, 398, 399, 400]
      //Input_0_Long: 1609L
      //Assert: assertNull(method_result.getDeleteStatus());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      //mock omsOrderItemMapper0
      OmsOrderItemMapper omsOrderItemMapper0 = mock(OmsOrderItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemMapper", (Object) omsOrderItemMapper0);
      Long long0 = new Long(1609L);
      
      //Call method: detail
      OmsOrderDetail omsOrderDetail0 = omsPortalOrderServiceImpl0.detail(long0);
      
      //Test Result Assert
      assertNull(omsOrderDetail0.getDeleteStatus());
  }

  @Test(timeout = 4000)
  public void test_generateConfirmOrder_19()  throws Throwable  {
      //caseID:1cf0c124b56e71bf42ec42a41020f0aa
      //CoveredLines: [33, 71, 73, 74, 75, 77, 78, 80, 81, 83, 85, 86, 88, 89, 90, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744]
      //Input_0_List<Long>: arrayList0
      //Assert: assertEquals(4, (int)method_result.getMemberIntegration());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      //mock umsIntegrationConsumeSetting0
      UmsIntegrationConsumeSetting umsIntegrationConsumeSetting0 = mock(UmsIntegrationConsumeSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsIntegrationConsumeSettingMapper0
      UmsIntegrationConsumeSettingMapper umsIntegrationConsumeSettingMapper0 = mock(UmsIntegrationConsumeSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsIntegrationConsumeSetting0).when(umsIntegrationConsumeSettingMapper0).selectByPrimaryKey(anyLong());
      Stack<CartPromotionItem> stack0 = new Stack<CartPromotionItem>();
      Integer integer0 = new Integer(4);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(cartPromotionItem0).getPrice();
      doReturn(integer0, integer0).when(cartPromotionItem0).getQuantity();
      doReturn(bigDecimal0).when(cartPromotionItem0).getReduceAmount();
      
      stack0.add(cartPromotionItem0);
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      Vector<SmsCouponHistoryDetail> vector0 = new Vector<SmsCouponHistoryDetail>();
      //mock umsMemberCouponService0
      UmsMemberCouponService umsMemberCouponService0 = mock(UmsMemberCouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(umsMemberCouponService0).listCart(nullable(java.util.List.class) , nullable(java.lang.Integer.class));
      LinkedList<UmsMemberReceiveAddress> linkedList0 = new LinkedList<UmsMemberReceiveAddress>();
      //mock umsMemberReceiveAddressService0
      UmsMemberReceiveAddressService umsMemberReceiveAddressService0 = mock(UmsMemberReceiveAddressService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsMemberReceiveAddressService0).list();
      Long long0 = new Long(0L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      doReturn(integer0).when(umsMember0).getIntegration();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberReceiveAddressService", (Object) umsMemberReceiveAddressService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberCouponService", (Object) umsMemberCouponService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "integrationConsumeSettingMapper", (Object) umsIntegrationConsumeSettingMapper0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      
      //Call method: generateConfirmOrder
      ConfirmOrderResult confirmOrderResult0 = omsPortalOrderServiceImpl0.generateConfirmOrder(arrayList0);
      
      //Test Result Assert
      assertEquals(4, (int)confirmOrderResult0.getMemberIntegration());
  }

  @Test(timeout = 4000)
  public void test_generateOrder_20()  throws Throwable  {
      //caseID:16592084dbff2c80eebe1e8a6a255bbd
      //CoveredLines: [33, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 124, 131, 132, 136, 139, 141, 142, 143, 159, 494, 496, 497, 498, 613, 614, 617, 626, 686, 687, 688, 689, 721, 722, 725, 726]
      //Input_0_OrderParam: {getCouponId=(-1L) 0L, getCartIds=arrayList2, getUseIntegration=(Integer) null}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Integer integer0 = new Integer(6);
      Long long0 = new Long((-1L));
      Long long1 = new Long(0L);
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(cartPromotionItem0).getPrice();
      doReturn("%02d").when(cartPromotionItem0).getProductAttr();
      doReturn("\u00058qm1u[UgX").when(cartPromotionItem0).getProductBrand();
      doReturn(long0).when(cartPromotionItem0).getProductCategoryId();
      doReturn(long0).when(cartPromotionItem0).getProductId();
      doReturn("1464").when(cartPromotionItem0).getProductName();
      doReturn("").when(cartPromotionItem0).getProductPic();
      doReturn("100").when(cartPromotionItem0).getProductSkuCode();
      doReturn(long0).when(cartPromotionItem0).getProductSkuId();
      doReturn("\u53EA\u80FD\u5220\u9664\u5DF2\u5B8C\u6210\u6216\u5DF2\u5173\u95ED\u7684\u8BA2\u5355\uFF01").when(cartPromotionItem0).getProductSn();
      doReturn(integer0).when(cartPromotionItem0).getQuantity();
      doReturn(integer0).when(cartPromotionItem0).getGrowth();
      doReturn(integer0).when(cartPromotionItem0).getIntegration();
      doReturn("yyyyMMdd").when(cartPromotionItem0).getPromotionMessage();
      doReturn(integer0, integer0).when(cartPromotionItem0).getRealStock();
      doReturn(bigDecimal0).when(cartPromotionItem0).getReduceAmount();
      
      arrayList0.add(cartPromotionItem0);
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      ArrayList<SmsCouponHistoryDetail> arrayList1 = new ArrayList<SmsCouponHistoryDetail>();
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1).when(smsCoupon0).getId();
      //mock smsCoupon1
      SmsCoupon smsCoupon1 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0, integer0).when(smsCoupon1).getUseType();
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("y>T9,<h").when(smsCouponHistoryDetail0).toString();
      doReturn(smsCoupon0, smsCoupon1).when(smsCouponHistoryDetail0).getCoupon();
      
      arrayList1.add(smsCouponHistoryDetail0);
      //mock umsMemberCouponService0
      UmsMemberCouponService umsMemberCouponService0 = mock(UmsMemberCouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList1).when(umsMemberCouponService0).listCart(ArgumentMatchers.<com.macro.mall.portal.domain.CartPromotionItem>anyList() , anyInt());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberCouponService", (Object) umsMemberCouponService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      ArrayList<Long> arrayList2 = new ArrayList<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList2).when(orderParam0).getCartIds();
      doReturn(long0, long1).when(orderParam0).getCouponId();
      doReturn((Integer) null).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         verifyException("java.math.BigDecimal", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_21()  throws Throwable  {
      //caseID:f10cde085b7e646f593941b6d298fe9f
      //CoveredLines: [33, 95, 97, 98, 99, 120, 124, 131, 132, 133, 686, 687, 688, 691, 692, 721, 726]
      //Input_0_OrderParam: {getCouponId=1791L 1791L, getCartIds=linkedList1}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      LinkedList<SmsCouponHistoryDetail> linkedList0 = new LinkedList<SmsCouponHistoryDetail>();
      Long long0 = new Long(0L);
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(smsCoupon0).getId();
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(smsCoupon0).when(smsCouponHistoryDetail0).getCoupon();
      
      linkedList0.add(smsCouponHistoryDetail0);
      //mock umsMemberCouponService0
      UmsMemberCouponService umsMemberCouponService0 = mock(UmsMemberCouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsMemberCouponService0).listCart(ArgumentMatchers.<com.macro.mall.portal.domain.CartPromotionItem>anyList() , anyInt());
      Long long1 = new Long(1791L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberCouponService", (Object) umsMemberCouponService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList1).when(orderParam0).getCartIds();
      doReturn(long1, long1).when(orderParam0).getCouponId();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u8BE5\u4F18\u60E0\u5238\u4E0D\u53EF\u7528", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_22()  throws Throwable  {
      //caseID:3b40c49a2a780c1739e68f108c8a981c
      //CoveredLines: [33, 95, 97, 98, 99, 120, 124, 126, 139, 146, 147, 148, 149, 581, 583, 588, 589, 591, 699, 700, 703, 721, 726]
      //Input_0_OrderParam: {getCouponId=(Long) null 0L, getCartIds=stack1, getUseIntegration=(-1) (-1) (-1)}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Integer integer0 = new Integer(0);
      //mock umsIntegrationConsumeSetting0
      UmsIntegrationConsumeSetting umsIntegrationConsumeSetting0 = mock(UmsIntegrationConsumeSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsIntegrationConsumeSetting0).getCouponStatus();
      //mock umsIntegrationConsumeSettingMapper0
      UmsIntegrationConsumeSettingMapper umsIntegrationConsumeSettingMapper0 = mock(UmsIntegrationConsumeSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsIntegrationConsumeSetting0).when(umsIntegrationConsumeSettingMapper0).selectByPrimaryKey(anyLong());
      Stack<CartPromotionItem> stack0 = new Stack<CartPromotionItem>();
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      Long long0 = new Long(0L);
      Integer integer1 = new Integer((-1));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      doReturn(integer1).when(umsMember0).getIntegration();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "integrationConsumeSettingMapper", (Object) umsIntegrationConsumeSettingMapper0);
      Stack<Long> stack1 = new Stack<Long>();
      Integer integer2 = new Integer((-1));
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack1).when(orderParam0).getCartIds();
      doReturn((Long) null, long0).when(orderParam0).getCouponId();
      doReturn(integer2, integer1, integer2).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u79EF\u5206\u4E0D\u53EF\u7528", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_23()  throws Throwable  {
      //caseID:3db3b56f77ee30b6c322cf02ada0babf
      //CoveredLines: [33, 95, 97, 98, 99, 120, 124, 126, 139, 146, 147, 148, 149, 581, 583, 588, 589, 594, 595, 699, 700, 703, 721, 726]
      //Input_0_OrderParam: {getCouponId=(Long) null (Long) null, getCartIds=linkedList0, getUseIntegration=1000 1 1}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Integer integer0 = new Integer(1000);
      //mock umsIntegrationConsumeSetting0
      UmsIntegrationConsumeSetting umsIntegrationConsumeSetting0 = mock(UmsIntegrationConsumeSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsIntegrationConsumeSetting0).getUseUnit();
      //mock umsIntegrationConsumeSettingMapper0
      UmsIntegrationConsumeSettingMapper umsIntegrationConsumeSettingMapper0 = mock(UmsIntegrationConsumeSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsIntegrationConsumeSetting0).when(umsIntegrationConsumeSettingMapper0).selectByPrimaryKey(anyLong());
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      Long long0 = new Long(1791L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      doReturn(integer0).when(umsMember0).getIntegration();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "integrationConsumeSettingMapper", (Object) umsIntegrationConsumeSettingMapper0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Integer integer1 = new Integer(1);
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(orderParam0).getCartIds();
      doReturn((Long) null, (Long) null).when(orderParam0).getCouponId();
      doReturn(integer0, integer1, integer1).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u79EF\u5206\u4E0D\u53EF\u7528", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_24()  throws Throwable  {
      //caseID:421fd8256e771916ce045ca95629f72e
      //CoveredLines: [33, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 721, 722, 723]
      //Input_0_OrderParam: {getCartIds=arrayList1}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(cartPromotionItem0);
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      Long long0 = new Long(2108L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      ArrayList<Long> arrayList1 = new ArrayList<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList1).when(orderParam0).getCartIds();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u5E93\u5B58\u4E0D\u8DB3\uFF0C\u65E0\u6CD5\u4E0B\u5355", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_25()  throws Throwable  {
      //caseID:3528c9e774c9c7d622d3dfe91f7ed595
      //CoveredLines: [33, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 124, 126, 127, 128, 139, 146, 147, 148, 149, 581, 583, 584, 699, 700, 701, 702, 703, 721, 722, 725, 726]
      //Input_0_OrderParam: {getCouponId=(Long) null (Long) null, getCartIds=linkedList0, getUseIntegration=100 100 100}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Vector<CartPromotionItem> vector0 = new Vector<CartPromotionItem>();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Integer integer0 = new Integer(100);
      Long long0 = new Long(975L);
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(cartPromotionItem0).getPrice();
      doReturn("orderItemList").when(cartPromotionItem0).getProductAttr();
      doReturn("orderItemList").when(cartPromotionItem0).getProductBrand();
      doReturn(long0).when(cartPromotionItem0).getProductCategoryId();
      doReturn(long0).when(cartPromotionItem0).getProductId();
      doReturn("\u4E0D\u80FD\u5220\u9664\u4ED6\u4EBA\u8BA2\u5355\uFF01").when(cartPromotionItem0).getProductName();
      doReturn("3161").when(cartPromotionItem0).getProductPic();
      doReturn("orderItemList").when(cartPromotionItem0).getProductSkuCode();
      doReturn(long0).when(cartPromotionItem0).getProductSkuId();
      doReturn("\u53EA\u80FD\u5220\u9664\u5DF2\u5B8C\u6210\u6216\u5DF2\u5173\u95ED\u7684\u8BA2\u5355\uFF01").when(cartPromotionItem0).getProductSn();
      doReturn(integer0).when(cartPromotionItem0).getQuantity();
      doReturn(integer0).when(cartPromotionItem0).getGrowth();
      doReturn(integer0).when(cartPromotionItem0).getIntegration();
      doReturn("orderItemList").when(cartPromotionItem0).getPromotionMessage();
      doReturn(integer0, integer0).when(cartPromotionItem0).getRealStock();
      doReturn(bigDecimal0).when(cartPromotionItem0).getReduceAmount();
      
      vector0.add(cartPromotionItem0);
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      Integer integer1 = new Integer(60);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      doReturn(integer1).when(umsMember0).getIntegration();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(orderParam0).getCartIds();
      doReturn((Long) null, (Long) null).when(orderParam0).getCouponId();
      doReturn(integer0, integer0, integer0).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u79EF\u5206\u4E0D\u53EF\u7528", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_26()  throws Throwable  {
      //caseID:e7f17a3c5de97fcbc22d5fe5fd459fe1
      //CoveredLines: [33, 95, 97, 98, 99, 120, 124, 126, 139, 141, 159, 161, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 182, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 212, 214, 215, 216, 220, 221, 225, 227, 228, 231, 232, 233, 236, 238, 239, 240, 241, 242, 326, 327, 329, 330, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 442, 443, 446, 447, 453, 454, 457, 464, 465, 468, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 494, 502, 508, 509, 513, 514, 517, 525, 526, 527, 528, 529, 530, 550, 551, 556, 563, 564, 569, 699, 700, 703, 710, 715, 721, 726]
      //Input_0_OrderParam: {getCouponId=(Long) null 135L 135L 135L 135L, getPayType=2212, getCartIds=linkedList1, getMemberReceiveAddressId=135L, getUseIntegration=(Integer) null (Integer) null 2212 2212 2212}
      //Assert: assertEquals(2, method_result.size());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(135L);
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(redisService0).incr(anyString() , anyLong());
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1721).when(omsOrderMapper0).insert(any(com.macro.mall.model.OmsOrder.class));
      Integer integer0 = new Integer(2212);
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getNormalOrderOvertime();
      LinkedList<OmsOrderSetting> linkedList0 = new LinkedList<OmsOrderSetting>();
      //mock omsOrderSetting1
      OmsOrderSetting omsOrderSetting1 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting1).getConfirmOvertime();
      
      linkedList0.add(omsOrderSetting1);
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(omsOrderSettingMapper0).selectByExample(any(com.macro.mall.model.OmsOrderSettingExample.class));
      doReturn(omsOrderSetting0).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      ArrayList<SmsCouponHistory> arrayList0 = new ArrayList<SmsCouponHistory>();
      //mock smsCouponHistory0
      SmsCouponHistory smsCouponHistory0 = mock(SmsCouponHistory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(smsCouponHistory0);
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(smsCouponHistoryMapper0).selectByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      doReturn(4).when(smsCouponHistoryMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsCouponHistory.class));
      //mock cancelOrderSender0
      CancelOrderSender cancelOrderSender0 = mock(CancelOrderSender.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock portalOrderItemDao0
      PortalOrderItemDao portalOrderItemDao0 = mock(PortalOrderItemDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(portalOrderItemDao0).insertList(ArgumentMatchers.<com.macro.mall.model.OmsOrderItem>anyList());
      ArrayList<CartPromotionItem> arrayList1 = new ArrayList<CartPromotionItem>();
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-2145338307)).when(omsCartItemService0).delete(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      doReturn(arrayList1).when(omsCartItemService0).listPromotion(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      //mock umsMemberReceiveAddress0
      UmsMemberReceiveAddress umsMemberReceiveAddress0 = mock(UmsMemberReceiveAddress.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2").when(umsMemberReceiveAddress0).getCity();
      doReturn("\u5E93\u5B58\u4E0D\u8DB3\uFF0C\u65E0\u6CD5\u4E0B\u5355").when(umsMemberReceiveAddress0).getDetailAddress();
      doReturn("q#xql[_R-XFlX*?pGk*").when(umsMemberReceiveAddress0).getName();
      doReturn("2").when(umsMemberReceiveAddress0).getPhoneNumber();
      doReturn("[L: 7@6xU#>=/cH2'").when(umsMemberReceiveAddress0).getPostCode();
      doReturn(";").when(umsMemberReceiveAddress0).getProvince();
      doReturn("1736").when(umsMemberReceiveAddress0).getRegion();
      //mock umsMemberReceiveAddressService0
      UmsMemberReceiveAddressService umsMemberReceiveAddressService0 = mock(UmsMemberReceiveAddressService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMemberReceiveAddress0).when(umsMemberReceiveAddressService0).getItem(nullable(java.lang.Long.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0, long0, long0).when(umsMember0).getId();
      doReturn(integer0).when(umsMember0).getIntegration();
      doReturn("null;null;;").when(umsMember0).getUsername();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberReceiveAddressService", (Object) umsMemberReceiveAddressService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemDao", (Object) portalOrderItemDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cancelOrderSender", (Object) cancelOrderSender0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "redisService", (Object) redisService0);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList1).when(orderParam0).getCartIds();
      doReturn((Long) null, long0, long0, long0, long0).when(orderParam0).getCouponId();
      doReturn(long0).when(orderParam0).getMemberReceiveAddressId();
      doReturn(integer0).when(orderParam0).getPayType();
      doReturn((Integer) null, (Integer) null, integer0, integer0, integer0).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      Map<String, Object> map0 = omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      
      //Test Result Assert
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test_generateOrder_27()  throws Throwable  {
      //caseID:ef0597fc84a3d692f5ef7d35f11354ae
      //CoveredLines: [33, 95, 97, 98, 99, 120, 124, 126, 139, 141, 159, 161, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 179, 180, 182, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 212, 214, 215, 216, 220, 221, 225, 227, 228, 231, 236, 238, 239, 240, 241, 242, 326, 327, 329, 330, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 442, 443, 446, 447, 453, 454, 457, 464, 465, 468, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 494, 502, 508, 509, 513, 514, 517, 525, 526, 527, 528, 529, 530, 537, 538, 543, 550, 551, 556, 563, 564, 569, 699, 700, 703, 710, 715, 721, 726]
      //Input_0_OrderParam: {getCouponId=(Long) null 1896L 1896L 1896L 1896L, getPayType=3605, getCartIds=vector1, getMemberReceiveAddressId=1896L, getUseIntegration=(Integer) null 3605 3605 (Integer) null}
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(1896L);
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(redisService0).incr(anyString() , anyLong());
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(100).when(omsOrderMapper0).insert(any(com.macro.mall.model.OmsOrder.class));
      Stack<OmsOrderSetting> stack0 = new Stack<OmsOrderSetting>();
      Integer integer0 = new Integer(3605);
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getConfirmOvertime();
      
      stack0.add(omsOrderSetting0);
      //mock omsOrderSetting1
      OmsOrderSetting omsOrderSetting1 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting1).getNormalOrderOvertime();
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(omsOrderSettingMapper0).selectByExample(any(com.macro.mall.model.OmsOrderSettingExample.class));
      doReturn(omsOrderSetting1).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      Vector<SmsCouponHistory> vector0 = new Vector<SmsCouponHistory>();
      //mock smsCouponHistory0
      SmsCouponHistory smsCouponHistory0 = mock(SmsCouponHistory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      vector0.add(smsCouponHistory0);
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(smsCouponHistoryMapper0).selectByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      doReturn(4).when(smsCouponHistoryMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsCouponHistory.class));
      //mock cancelOrderSender0
      CancelOrderSender cancelOrderSender0 = mock(CancelOrderSender.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock portalOrderItemDao0
      PortalOrderItemDao portalOrderItemDao0 = mock(PortalOrderItemDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-2131576359)).when(portalOrderItemDao0).insertList(ArgumentMatchers.<com.macro.mall.model.OmsOrderItem>anyList());
      Stack<CartPromotionItem> stack1 = new Stack<CartPromotionItem>();
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(omsCartItemService0).delete(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      doReturn(stack1).when(omsCartItemService0).listPromotion(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      //mock umsMemberReceiveAddress0
      UmsMemberReceiveAddress umsMemberReceiveAddress0 = mock(UmsMemberReceiveAddress.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("21").when(umsMemberReceiveAddress0).getCity();
      doReturn("\u79EF\u5206\u4E0D\u53EF\u7528").when(umsMemberReceiveAddress0).getDetailAddress();
      doReturn("Insufficient Space On Resource").when(umsMemberReceiveAddress0).getName();
      doReturn("1736").when(umsMemberReceiveAddress0).getPhoneNumber();
      doReturn("421").when(umsMemberReceiveAddress0).getPostCode();
      doReturn("!pY~m1P*z7").when(umsMemberReceiveAddress0).getProvince();
      doReturn("confirm_status <>").when(umsMemberReceiveAddress0).getRegion();
      //mock umsMemberReceiveAddressService0
      UmsMemberReceiveAddressService umsMemberReceiveAddressService0 = mock(UmsMemberReceiveAddressService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMemberReceiveAddress0).when(umsMemberReceiveAddressService0).getItem(nullable(java.lang.Long.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0, long0).when(umsMember0).getId();
      doReturn("3177").when(umsMember0).getUsername();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberReceiveAddressService", (Object) umsMemberReceiveAddressService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemDao", (Object) portalOrderItemDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cancelOrderSender", (Object) cancelOrderSender0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "redisService", (Object) redisService0);
      Vector<Long> vector1 = new Vector<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector1).when(orderParam0).getCartIds();
      doReturn((Long) null, long0, long0, long0, long0).when(orderParam0).getCouponId();
      doReturn(long0).when(orderParam0).getMemberReceiveAddressId();
      doReturn(integer0).when(orderParam0).getPayType();
      doReturn((Integer) null, integer0, integer0, (Integer) null).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      Map<String, Object> map0 = omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      
      //Test Result Assert
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_generateOrder_28()  throws Throwable  {
      //caseID:d1478a5bb8c777d17de2edadfbca4361
      //CoveredLines: [33, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 124, 126, 127, 128, 139, 146, 147, 148, 152, 153, 154, 155, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 175, 179, 180, 182, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 212, 214, 215, 216, 220, 221, 222, 223, 224, 225, 227, 231, 236, 238, 239, 240, 241, 242, 326, 327, 329, 330, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 464, 465, 466, 467, 468, 494, 496, 497, 498, 499, 500, 501, 502, 508, 509, 510, 511, 512, 513, 514, 515, 517, 525, 526, 527, 528, 529, 530, 537, 538, 539, 540, 542, 543, 563, 564, 565, 566, 568, 569, 581, 583, 588, 589, 594, 598, 599, 600, 603, 699, 700, 701, 702, 703, 710, 711, 712, 713, 714, 715, 721, 722, 725, 726]
      //Input_0_OrderParam: {getCouponId=(Long) null 614L (Long) null (Long) null, getPayType=60, getCartIds=arrayList0, getMemberReceiveAddressId=614L, getUseIntegration=60 60 104 60 60 (Integer) null}
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(614L);
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(redisService0).incr(anyString() , anyLong());
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(Integer.MAX_VALUE).when(omsOrderMapper0).insert(any(com.macro.mall.model.OmsOrder.class));
      Integer integer0 = new Integer(60);
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getNormalOrderOvertime();
      Stack<OmsOrderSetting> stack0 = new Stack<OmsOrderSetting>();
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(omsOrderSettingMapper0).selectByExample(any(com.macro.mall.model.OmsOrderSettingExample.class));
      doReturn(omsOrderSetting0).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(pmsSkuStock0).when(pmsSkuStockMapper0).selectByPrimaryKey(anyLong());
      doReturn(4).when(pmsSkuStockMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.PmsSkuStock.class));
      //mock omsOrderSetting1
      OmsOrderSetting omsOrderSetting1 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting1).getConfirmOvertime();
      
      stack0.add(omsOrderSetting1);
      //mock umsIntegrationConsumeSetting0
      UmsIntegrationConsumeSetting umsIntegrationConsumeSetting0 = mock(UmsIntegrationConsumeSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsIntegrationConsumeSetting0).getCouponStatus();
      doReturn(integer0).when(umsIntegrationConsumeSetting0).getMaxPercentPerOrder();
      doReturn(integer0, integer0).when(umsIntegrationConsumeSetting0).getUseUnit();
      //mock umsIntegrationConsumeSettingMapper0
      UmsIntegrationConsumeSettingMapper umsIntegrationConsumeSettingMapper0 = mock(UmsIntegrationConsumeSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsIntegrationConsumeSetting0).when(umsIntegrationConsumeSettingMapper0).selectByPrimaryKey(anyLong());
      //mock cancelOrderSender0
      CancelOrderSender cancelOrderSender0 = mock(CancelOrderSender.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock portalOrderItemDao0
      PortalOrderItemDao portalOrderItemDao0 = mock(PortalOrderItemDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(104).when(portalOrderItemDao0).insertList(ArgumentMatchers.<com.macro.mall.model.OmsOrderItem>anyList());
      Vector<CartPromotionItem> vector0 = new Vector<CartPromotionItem>();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Integer integer1 = new Integer(104);
      BigDecimal bigDecimal1 = new BigDecimal(104);
      Integer integer2 = new Integer(60);
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(cartPromotionItem0).getId();
      doReturn(bigDecimal1).when(cartPromotionItem0).getPrice();
      doReturn("gift_growth <>").when(cartPromotionItem0).getProductAttr();
      doReturn("gift_growth <>").when(cartPromotionItem0).getProductBrand();
      doReturn(long0).when(cartPromotionItem0).getProductCategoryId();
      doReturn(long0).when(cartPromotionItem0).getProductId();
      doReturn("@-\"!").when(cartPromotionItem0).getProductName();
      doReturn("1").when(cartPromotionItem0).getProductPic();
      doReturn("1").when(cartPromotionItem0).getProductSkuCode();
      doReturn(long0, long0).when(cartPromotionItem0).getProductSkuId();
      doReturn("gRjLAp3D5iN").when(cartPromotionItem0).getProductSn();
      doReturn(integer1, integer1).when(cartPromotionItem0).getQuantity();
      doReturn(integer0).when(cartPromotionItem0).getGrowth();
      doReturn(integer1).when(cartPromotionItem0).getIntegration();
      doReturn("H)[HXMtzv").when(cartPromotionItem0).getPromotionMessage();
      doReturn(integer0, integer2).when(cartPromotionItem0).getRealStock();
      doReturn(bigDecimal0).when(cartPromotionItem0).getReduceAmount();
      
      vector0.add(cartPromotionItem0);
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(4).when(omsCartItemService0).delete(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      doReturn(vector0).when(omsCartItemService0).listPromotion(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      //mock umsMemberReceiveAddress0
      UmsMemberReceiveAddress umsMemberReceiveAddress0 = mock(UmsMemberReceiveAddress.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("@-\"!").when(umsMemberReceiveAddress0).getCity();
      doReturn("gRjLAp3D5iN").when(umsMemberReceiveAddress0).getDetailAddress();
      doReturn("0").when(umsMemberReceiveAddress0).getName();
      doReturn("reactor.core.publisher.MonoNext").when(umsMemberReceiveAddress0).getPhoneNumber();
      doReturn("-2145688091").when(umsMemberReceiveAddress0).getPostCode();
      doReturn("Can't signal value due to lack of requests").when(umsMemberReceiveAddress0).getProvince();
      doReturn("SD,[l(!43R]?G,BKj_").when(umsMemberReceiveAddress0).getRegion();
      //mock umsMemberReceiveAddressService0
      UmsMemberReceiveAddressService umsMemberReceiveAddressService0 = mock(UmsMemberReceiveAddressService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMemberReceiveAddress0).when(umsMemberReceiveAddressService0).getItem(nullable(java.lang.Long.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0).when(umsMember0).getId();
      doReturn(integer1).when(umsMember0).getIntegration();
      doReturn("orderItemList").when(umsMember0).getUsername();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberReceiveAddressService", (Object) umsMemberReceiveAddressService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemDao", (Object) portalOrderItemDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cancelOrderSender", (Object) cancelOrderSender0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "integrationConsumeSettingMapper", (Object) umsIntegrationConsumeSettingMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "redisService", (Object) redisService0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(orderParam0).getCartIds();
      doReturn((Long) null, long0, (Long) null, (Long) null).when(orderParam0).getCouponId();
      doReturn(long0).when(orderParam0).getMemberReceiveAddressId();
      doReturn(integer0).when(orderParam0).getPayType();
      doReturn(integer0, integer2, integer1, integer0, integer0, (Integer) null).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      Map<String, Object> map0 = omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      
      //Test Result Assert
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_generateOrderSn_29()  throws Throwable  {
      //caseID:7180b529979d7bd1515fef97acc23ed5
      //CoveredLines: [33, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 435]
      //Input_0_com.macro.mall.model.OmsOrder: {getPayType=(-2144085728), getSourceType=(-2144085728)}
      //Assert: assertEquals("20140214-2144085728-21440857282147483669", method_result);
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(2147483669L);
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(redisService0).incr(anyString() , anyLong());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "redisService", (Object) redisService0);
      Integer integer0 = new Integer((-2144085728));
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrder0).getPayType();
      doReturn(integer0).when(omsOrder0).getSourceType();
      
      //Call method: generateOrderSn
      Object object0 = PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "generateOrderSn", (Object) omsOrder0, (Class<?>) OmsOrder.class);
      
      //Test Result Assert
      assertEquals("20140214-2144085728-21440857282147483669", object0);
  }

  @Test(timeout = 4000)
  public void test_getCouponOrderItemByRelation_30()  throws Throwable  {
      //caseID:29cf8bda026a5b06e711351eae4110a8
      //CoveredLines: [33, 650, 651, 676]
      //Input_0_com.macro.mall.portal.domain.SmsCouponHistoryDetail: {}
      //Input_1_List<com.macro.mall.model.OmsOrderItem>: linkedList0
      //Input_2_int: 28
      //Assert: assertEquals(0, method_result.size());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      LinkedList<OmsOrderItem> linkedList0 = new LinkedList<OmsOrderItem>();
      
      //Call method: getCouponOrderItemByRelation
      List<OmsOrderItem> list0 = (List<OmsOrderItem>)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "getCouponOrderItemByRelation", (Object) smsCouponHistoryDetail0, (Class<?>) SmsCouponHistoryDetail.class, (Object) linkedList0, (Class<?>) List.class, (Object) 28, (Class<?>) int.class);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_getUseIntegrationAmount_31()  throws Throwable  {
      //caseID:d3b9030a0706de65afa5485566f21afc
      //CoveredLines: [33, 581, 583, 588, 589, 594, 598, 599, 600, 601]
      //Input_0_Integer: (-37)
      //Input_1_BigDecimal: BigDecimal.ONE
      //Input_2_com.macro.mall.model.UmsMember: {getIntegration=(-37)}
      //Input_3_boolean: true
      //Assert: assertEquals((short)0, method_result.shortValue());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Integer integer0 = new Integer((-37));
      //mock umsIntegrationConsumeSetting0
      UmsIntegrationConsumeSetting umsIntegrationConsumeSetting0 = mock(UmsIntegrationConsumeSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsIntegrationConsumeSetting0).getCouponStatus();
      doReturn(integer0).when(umsIntegrationConsumeSetting0).getMaxPercentPerOrder();
      doReturn(integer0, integer0).when(umsIntegrationConsumeSetting0).getUseUnit();
      //mock umsIntegrationConsumeSettingMapper0
      UmsIntegrationConsumeSettingMapper umsIntegrationConsumeSettingMapper0 = mock(UmsIntegrationConsumeSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsIntegrationConsumeSetting0).when(umsIntegrationConsumeSettingMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "integrationConsumeSettingMapper", (Object) umsIntegrationConsumeSettingMapper0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsMember0).getIntegration();
      
      //Call method: getUseIntegrationAmount
      BigDecimal bigDecimal1 = (BigDecimal)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "getUseIntegrationAmount", (Object) integer0, (Class<?>) Integer.class, (Object) bigDecimal0, (Class<?>) BigDecimal.class, (Object) umsMember0, (Class<?>) UmsMember.class, (Object) true, (Class<?>) boolean.class);
      
      //Test Result Assert
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test_handleCouponAmount_32()  throws Throwable  {
      //caseID:d59cecaceed8a46d18dde5e581853b74
      //CoveredLines: [33, 613, 614, 617, 623, 624, 626, 634, 635, 640, 650, 651, 664, 665, 666, 667, 668, 669, 672, 674, 676, 699, 700, 703]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: arrayList0
      //Input_1_com.macro.mall.portal.domain.SmsCouponHistoryDetail: {getCoupon=smsCoupon0, getProductRelationList=arrayList1}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      ArrayList<OmsOrderItem> arrayList0 = new ArrayList<OmsOrderItem>();
      Integer integer0 = new Integer(429);
      Integer integer1 = new Integer(2);
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0, integer1).when(smsCoupon0).getUseType();
      Long long0 = new Long(1000L);
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrderItem0).getProductId();
      
      arrayList0.add(omsOrderItem0);
      ArrayList<SmsCouponProductRelation> arrayList1 = new ArrayList<SmsCouponProductRelation>();
      Long long1 = new Long(0L);
      //mock smsCouponProductRelation0
      SmsCouponProductRelation smsCouponProductRelation0 = mock(SmsCouponProductRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1).when(smsCouponProductRelation0).getProductId();
      
      arrayList1.add(smsCouponProductRelation0);
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(smsCoupon0).when(smsCouponHistoryDetail0).getCoupon();
      doReturn(arrayList1).when(smsCouponHistoryDetail0).getProductRelationList();
      
      //Call method: handleCouponAmount
      PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "handleCouponAmount", (Object) arrayList0, (Class<?>) List.class, (Object) smsCouponHistoryDetail0, (Class<?>) SmsCouponHistoryDetail.class);
      
      //Test Result Assert
      assertTrue(arrayList0.contains(omsOrderItem0));
  }

  @Test(timeout = 4000)
  public void test_handleCouponAmount_33()  throws Throwable  {
      //caseID:3ca0c61a7aa755670694fdf961b2de3a
      //CoveredLines: [33, 613, 614, 617, 619, 620, 621, 626, 634, 635, 640, 650, 651, 652, 653, 654, 655, 656, 657, 660, 662, 663, 676, 699, 700, 703]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: stack0
      //Input_1_com.macro.mall.portal.domain.SmsCouponHistoryDetail: {getCoupon=smsCoupon0, getCategoryRelationList=vector0}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Stack<OmsOrderItem> stack0 = new Stack<OmsOrderItem>();
      Integer integer0 = new Integer(382);
      Long long0 = new Long(1L);
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrderItem0).getProductCategoryId();
      
      stack0.add(omsOrderItem0);
      Integer integer1 = new Integer(1);
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer1).when(smsCoupon0).getUseType();
      Vector<SmsCouponProductCategoryRelation> vector0 = new Vector<SmsCouponProductCategoryRelation>();
      Long long1 = new Long(1508L);
      //mock smsCouponProductCategoryRelation0
      SmsCouponProductCategoryRelation smsCouponProductCategoryRelation0 = mock(SmsCouponProductCategoryRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1).when(smsCouponProductCategoryRelation0).getProductCategoryId();
      
      vector0.add(smsCouponProductCategoryRelation0);
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(smsCouponHistoryDetail0).getCategoryRelationList();
      doReturn(smsCoupon0).when(smsCouponHistoryDetail0).getCoupon();
      
      //Call method: handleCouponAmount
      PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "handleCouponAmount", (Object) stack0, (Class<?>) List.class, (Object) smsCouponHistoryDetail0, (Class<?>) SmsCouponHistoryDetail.class);
      
      //Test Result Assert
      assertEquals("[null]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test_hasStock_34()  throws Throwable  {
      //caseID:a609390c1e30e172bb92255a9a69cc7e
      //CoveredLines: [33, 721, 722, 723]
      //Input_0_List<com.macro.mall.portal.domain.CartPromotionItem>: arrayList0
      //Assert: assertFalse(method_result);
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      Integer integer0 = new Integer((-1));
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(cartPromotionItem0).getRealStock();
      
      arrayList0.add(cartPromotionItem0);
      
      //Call method: hasStock
      boolean boolean0 = (boolean)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "hasStock", (Object) arrayList0, (Class<?>) List.class);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_list_35()  throws Throwable  {
      //caseID:f3b5aab9a61f1d7ba72a3ec5e42ed903
      //CoveredLines: [33, 350, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372]
      //Input_0_Integer: (-56613888)
      //Input_1_Integer: (-56613888)
      //Input_2_Integer: (-56613888)
      //Assert: assertEquals(1, (int)method_result.getPageNum());
      //Assert: assertEquals(0L, (long)method_result.getTotal());
      //Assert: assertEquals(0, (int)method_result.getPageSize());
      //Assert: assertEquals(0, (int)method_result.getTotalPage());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      ArrayList<OmsOrder> arrayList0 = new ArrayList<OmsOrder>();
      Integer integer0 = new Integer((-56613888));
      Long long0 = new Long(1730);
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsOrderMapper0).selectByExample(any(com.macro.mall.model.OmsOrderExample.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: list
      CommonPage<OmsOrderDetail> commonPage0 = omsPortalOrderServiceImpl0.list(integer0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(1, (int)commonPage0.getPageNum());
      
      //Test Result Assert
      assertEquals(0L, (long)commonPage0.getTotal());
      
      //Test Result Assert
      assertEquals(0, (int)commonPage0.getPageSize());
      
      //Test Result Assert
      assertEquals(0, (int)commonPage0.getTotalPage());
  }

  @Test(timeout = 4000)
  public void test_list_36()  throws Throwable  {
      //caseID:6627fb4dd71067ad604112af2c2c2851
      //CoveredLines: [33, 350, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 383, 384, 385, 386, 387, 388]
      //Input_0_Integer: 2373
      //Input_1_Integer: 2373
      //Input_2_Integer: 2373
      //Assert: assertEquals(1L, (long)method_result.getTotal());
      //Assert: assertEquals(1, (int)method_result.getPageNum());
      //Assert: assertEquals(1, (int)method_result.getTotalPage());
      //Assert: assertEquals(1, (int)method_result.getPageSize());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Stack<OmsOrderItem> stack0 = new Stack<OmsOrderItem>();
      //mock omsOrderItemMapper0
      OmsOrderItemMapper omsOrderItemMapper0 = mock(OmsOrderItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(omsOrderItemMapper0).selectByExample(any(com.macro.mall.model.OmsOrderItemExample.class));
      ArrayList<OmsOrder> arrayList0 = new ArrayList<OmsOrder>();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock date2
      Date date2 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(2373);
      //mock date3
      Date date3 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock date4
      Date date4 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock date5
      Date date5 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((Integer) null).when(omsOrder0).getAutoConfirmDay();
      doReturn("3").when(omsOrder0).getBillContent();
      doReturn("38").when(omsOrder0).getBillHeader();
      doReturn("3").when(omsOrder0).getBillReceiverEmail();
      doReturn("2128").when(omsOrder0).getBillReceiverPhone();
      doReturn(integer0).when(omsOrder0).getBillType();
      doReturn(date5).when(omsOrder0).getCommentTime();
      doReturn((Integer) null).when(omsOrder0).getConfirmStatus();
      doReturn(bigDecimal0).when(omsOrder0).getCouponAmount();
      doReturn(long0).when(omsOrder0).getCouponId();
      doReturn(date4).when(omsOrder0).getCreateTime();
      doReturn(integer0).when(omsOrder0).getDeleteStatus();
      doReturn("reactor.core.publisher.ParallelDoOnEach").when(omsOrder0).getDeliveryCompany();
      doReturn("JvTDWa^F/L|(? O").when(omsOrder0).getDeliverySn();
      doReturn(date3).when(omsOrder0).getDeliveryTime();
      doReturn(bigDecimal0).when(omsOrder0).getDiscountAmount();
      doReturn(bigDecimal0).when(omsOrder0).getFreightAmount();
      doReturn((Integer) null).when(omsOrder0).getGrowth();
      doReturn(long0, long0).when(omsOrder0).getId();
      doReturn(integer0).when(omsOrder0).getIntegration();
      doReturn(bigDecimal0).when(omsOrder0).getIntegrationAmount();
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn("\u652F\u4ED8\u72B6\u6001\u4E0D\u6B63\u786E").when(omsOrder0).getMemberUsername();
      doReturn(date2).when(omsOrder0).getModifyTime();
      doReturn("YD[^D1O[t^\"& Zn").when(omsOrder0).getNote();
      doReturn("orderItemList;;").when(omsOrder0).getOrderSn();
      doReturn((Integer) null).when(omsOrder0).getOrderType();
      doReturn(bigDecimal0).when(omsOrder0).getPayAmount();
      doReturn((Integer) null).when(omsOrder0).getPayType();
      doReturn(date1).when(omsOrder0).getPaymentTime();
      doReturn(bigDecimal0).when(omsOrder0).getPromotionAmount();
      doReturn("reactor.core.publisher.MonoNext").when(omsOrder0).getPromotionInfo();
      doReturn(date0).when(omsOrder0).getReceiveTime();
      doReturn("").when(omsOrder0).getReceiverCity();
      doReturn("").when(omsOrder0).getReceiverDetailAddress();
      doReturn("").when(omsOrder0).getReceiverName();
      doReturn("\u652F\u4ED8\u72B6\u6001\u4E0D\u6B63\u786E").when(omsOrder0).getReceiverPhone();
      doReturn("\u8BE5\u8BA2\u5355\u8FD8\u672A\u53D1\u8D27\uFF01").when(omsOrder0).getReceiverPostCode();
      doReturn("orderItemList").when(omsOrder0).getReceiverProvince();
      doReturn("Nf4WJ<-Q`P").when(omsOrder0).getReceiverRegion();
      doReturn((Integer) null).when(omsOrder0).getSourceType();
      doReturn((Integer) null).when(omsOrder0).getStatus();
      doReturn(bigDecimal0).when(omsOrder0).getTotalAmount();
      doReturn((Integer) null).when(omsOrder0).getUseIntegration();
      
      arrayList0.add(omsOrder0);
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsOrderMapper0).selectByExample(any(com.macro.mall.model.OmsOrderExample.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemMapper", (Object) omsOrderItemMapper0);
      
      //Call method: list
      CommonPage<OmsOrderDetail> commonPage0 = omsPortalOrderServiceImpl0.list(integer0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(1L, (long)commonPage0.getTotal());
      
      //Test Result Assert
      assertEquals(1, (int)commonPage0.getPageNum());
      
      //Test Result Assert
      assertEquals(1, (int)commonPage0.getTotalPage());
      
      //Test Result Assert
      assertEquals(1, (int)commonPage0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test_paySuccess_37()  throws Throwable  {
      //caseID:f4ac41c4468786abf8a6ece47d32e406
      //CoveredLines: [33, 247, 248]
      //Input_0_Long: 0L
      //Input_1_Integer: (-2145388540)
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer((-2145388540));
      
      //Call method: paySuccess
      try { 
        omsPortalOrderServiceImpl0.paySuccess(long0, integer0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.portal.service.impl.OmsPortalOrderServiceImpl", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockException", e.getClass().getName());
         assertEquals("\u652F\u4ED8\u72B6\u6001\u4E0D\u6B63\u786E", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_paySuccess_38()  throws Throwable  {
      //caseID:a75a835f158055914e90a3f681460f4d
      //CoveredLines: [33, 247, 248]
      //Input_0_Long: 1L
      //Input_1_Integer: 100
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(1L);
      Integer integer0 = new Integer(100);
      
      //Call method: paySuccess
      try { 
        omsPortalOrderServiceImpl0.paySuccess(long0, integer0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.portal.service.impl.OmsPortalOrderServiceImpl", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockException", e.getClass().getName());
         assertEquals("\u652F\u4ED8\u72B6\u6001\u4E0D\u6B63\u786E", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_paySuccess_39()  throws Throwable  {
      //caseID:5e4a310c5eccb3efbb46b3f3a1012113
      //CoveredLines: [33, 247, 251, 252, 253, 254, 255, 256, 258, 259, 260]
      //Input_0_Long: 0L
      //Input_1_Integer: 0
      //Assert: assertEquals(0, (int)method_result);
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(omsOrderMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.OmsOrder.class));
      //mock omsOrderDetail0
      OmsOrderDetail omsOrderDetail0 = mock(OmsOrderDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock portalOrderDao0
      PortalOrderDao portalOrderDao0 = mock(PortalOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrderDetail0).when(portalOrderDao0).getDetail(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "portalOrderDao", (Object) portalOrderDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(0);
      
      //Call method: paySuccess
      Integer integer1 = omsPortalOrderServiceImpl0.paySuccess(long0, integer0);
      
      //Test Result Assert
      assertEquals(0, (int)integer1);
  }
}
